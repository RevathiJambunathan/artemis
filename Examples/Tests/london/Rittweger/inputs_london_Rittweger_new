# Maximum number of time steps
max_step = 300

# number of grid points
amr.n_cell =  32 32 160

# Maximum allowable size of each subdomain in the problem domain;
#    this is used to decompose the domain for parallel calculations.
amr.max_grid_size = 256

# Maximum level in hierarchy (for now must be 0, i.e., one level in total)
amr.max_level = 0

# Geometry
geometry.coord_sys   = 0                     # 0: Cartesian
geometry.dims = 3
boundary.field_lo = periodic periodic pml
boundary.field_hi = periodic periodic pml
geometry.prob_lo     =  -8.e-6 -8.e-6 -8.e-6
geometry.prob_hi     =   8.e-6  8.e-6  8.e-6
amr.max_level = 0

my_constants.dx = 16.e-6 / 32
my_constants.dy = 16.e-6 / 32
my_constants.dz = 16.e-6 / 160
my_constants.ddz = dz / 100
my_constants.ddx = dx / 100

# Verbosity
warpx.verbose = 1

# Algorithms
algo.current_deposition = esirkepov

my_constants.sigma = 0.0
my_constants.eps_r = 1.0
my_constants.mu_r = 1.0
my_constants.min_box = -8.e-6
my_constants.max_box = 8.e-6
my_constants.min_slab = 0.0
my_constants.max_slab = 3.*dz

algo.em_solver_medium = macroscopic # vacuum/macroscopic
algo.macroscopic_sigma_method = backwardeuler # laxwendroff or backwardeuler
macroscopic.sigma_init_style = "parse_sigma_function" # parse or "constant"
macroscopic.epsilon_init_style = "parse_epsilon_function" # parse or "constant"
macroscopic.mu_init_style = "parse_mu_function" # parse or "constant"
macroscopic.sigma_function(x,y,z) = "sigma"
macroscopic.epsilon_function(x,y,z) = "8.8541878128e-12*eps_r"
macroscopic.mu_function(x,y,z) = "1.25663706212e-06*mu_r"

# CFL
warpx.cfl = 0.519615

#London
algo.yee_coupled_solver = MaxwellLondon
london.penetration_depth = 3.e-7
london.superconductor_function(x,y,z) = "1.*(z>min_slab-ddz)*(z<max_slab+ddz)"
#london.superconductor_function(x,y,z) = "0."

my_constants.pi = 3.14159265359
my_constants.c = 299792458.
my_constants.dt = 0.519615/(c*(1./dx**2 + 1./dy**2 + 1./dz**2)**(0.5))
my_constants.init = 28*dt
my_constants.width = 7*dt
my_constants.source = min_box + 5*dz
my_constants.obs = -dz

warpx.E_excitation_on_grid_style = "parse_E_excitation_grid_function"
warpx.Ez_excitation_grid_function(x,y,z,t) = "0."
warpx.Ey_excitation_grid_function(x,y,z,t) = "0."
warpx.Ex_excitation_grid_function(x,y,z,t) = "exp(-(t - init)**2/(2*width*width))"

warpx.B_excitation_on_grid_style = "parse_B_excitation_grid_function"
#warpx.Bx_excitation_grid_function(x,y,z,t) = "(-1.e5/c)*exp(-(t - init)**2/(2*width*width))"
warpx.Bx_excitation_grid_function(x,y,z,t)= "0."
warpx.By_excitation_grid_function(x,y,z,t)= "0."
warpx.Bz_excitation_grid_function(x,y,z,t) = "0."

warpx.Ez_excitation_flag_function(x,y,z) = "0."
warpx.Ey_excitation_flag_function(x,y,z) = "0."
warpx.Ex_excitation_flag_function(x,y,z) = "0. + 1*(z>(source - dz/2 - ddz))*(z<(source + ddz))"

warpx.Bz_excitation_flag_function(x,y,z) = "0."
warpx.Bx_excitation_flag_function(x,y,z) = "0."
warpx.By_excitation_flag_function(x,y,z) = "0. + 1*(z>(source - dz/2 - ddz))*(z<(source + ddz))"


# Diagnostics
diagnostics.diags_names = diag1
diag1.intervals = 10
diag1.diag_type = Full
diag1.fields_to_plot = Ex Ey Ez Bx By Bz jx jy jz sigma epsilon mu
#diag1.fields_to_plot = Ex Ey Ez Bx By Bz jx jy jz superconductor sigma epsilon mu Bx_sc By_sc Bz_sc
diag1.plot_raw_fields = 1

# Remove species
particles.nspecies = 0

warpx.reduced_diags_names = Eobs

Eobs.type = RawEFieldReduction
Eobs.reduction_type = integral
Eobs.integration_type = surface
Eobs.intervals = 1
Eobs.surface_normal = X
Eobs.reduced_function(x,y,z) = (y > 0) * (y < dy) * (z > obs - dz/2) * (z < obs + dz/2) * (x > -ddx) * (x < ddx)
